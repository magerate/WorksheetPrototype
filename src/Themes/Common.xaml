<!--

    Actipro Software's WPF DataGrid Contrib Add-on
    http://actipro.codeplex.com/

    Copyright (c) 2009-2011 Actipro Software LLC. 

    This source code is subject to the terms of the Microsoft Public License (Ms-PL). 

    Redistribution and use in source and binary forms, with or without modification, 
    is permitted provided that redistributions of the source code retain the above 
    copyright notices and this file header. 

    Additional copyright notices should be appended to the list above. 

    For details, see <http://www.opensource.org/licenses/ms-pl.html>. 

    All other rights reserved. 

-->
    
<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:PresentationOptions="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
        xmlns:datagridThemes="clr-namespace:Windows.Controls.DataGrid.Themes"
        xmlns:src="clr-namespace:WorksheetPrototype"
        xmlns:themes="clr-namespace:Microsoft.Windows.Themes;assembly=PresentationFramework.Aero"
        xmlns:system="clr-namespace:System;assembly=mscorlib">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="PinGlyphs.xaml" />
    </ResourceDictionary.MergedDictionaries>

    <src:TriggerDoubleConverter x:Key="triggerConverter"/>

    <!-- DataGridColumnHeaderGripperStyle -->
    <Style x:Key="DataGridColumnHeaderGripperStyle" TargetType="{x:Type Thumb}">
        <Setter Property="Background" Value="Transparent" />
        <!--<Setter Property="Cursor" Value="{x:Static datagridThemes:DataGridCursors.ColumnResizeCursor}" />-->
        <Setter Property="Width" Value="4" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Thumb}">
                    <Border Padding="{TemplateBinding Padding}" Background="{TemplateBinding Background}" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DataGridColumnHeader -->
    <Style x:Key="{x:Static datagridThemes:DataGridCommonDictionary.DataGridColumnHeaderStyleKey}"
            TargetType="{x:Type DataGridColumnHeader}">
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="Margin" Value="-1,0,0,0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!-- DataGridRowHeader -->
    <Style x:Key="{x:Static datagridThemes:DataGridCommonDictionary.DataGridRowHeaderStyleKey}"
            TargetType="{x:Type DataGridRowHeader}">
        <Setter Property="BorderThickness" Value="0,0,1,1" />
        <Setter Property="Margin" Value="0,-1,0,0" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
    </Style>

    <!-- DataGridSelectAllStyle -->
    <Style x:Key="DataGridSelectAllStyle" TargetType="{x:Type Button}">
        <Setter Property="OverridesDefaultStyle" Value="true" />

        <Setter Property="Command" Value="{x:Static DataGrid.SelectAllCommand}" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="Padding" Value="0,0,1,0" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <themes:DataGridHeaderBorder IsHovered="{TemplateBinding IsMouseOver}"
                            IsPressed="{TemplateBinding IsPressed}" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            Padding="{TemplateBinding Padding}" Orientation="Vertical" SeparatorVisibility="Visible" IsClickable="True">
                        <Polygon x:Name="arrow" Fill="{TemplateBinding Foreground}" StrokeThickness="1"
                                Stroke="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.SelectAllButtonGlyphBorderBrushKey}}"
                                Margin="0,0,3,4" HorizontalAlignment="Right" VerticalAlignment="Bottom" Points="0,6 6,6 6,0" />
                    </themes:DataGridHeaderBorder>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Visibility" TargetName="arrow" Value="Collapsed" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DataGridCell -->
    <Style x:Key="{x:Static datagridThemes:DataGridCommonDictionary.DataGridCellStyleKey}"
            TargetType="{x:Type DataGridCell}">
        <Setter Property="OverridesDefaultStyle" Value="true" />

        <Setter Property="Background" Value="Transparent" />
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="BorderThickness" Value="0,1" />
        <Setter Property="FocusVisualStyle" Value="{x:Null}" />

        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Padding" Value="1,0,0,0" />
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridCell}">
                    <Grid>
                        <Border x:Name="contentBorder" Background="{TemplateBinding Background}"
                                BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                                Padding="{TemplateBinding Padding}" SnapsToDevicePixels="True">
                            <ContentPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"
                                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />
                        </Border>
                        <Border x:Name="focusedBorder"
                                BorderBrush="{DynamicResource {x:Static DataGrid.FocusBorderBrushKey}}"
                                BorderThickness="1" Visibility="Collapsed" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsSelected" Value="True">
                            <Setter TargetName="contentBorder" Property="Background"
                                    Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.CellBackgroundSelectedBrushKey}}" />
                            <Setter TargetName="contentBorder" Property="BorderBrush"
                                    Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.CellBorderSelectedBrushKey}}" />
                            <Setter Property="Foreground"
                                    Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.CellForegroundSelectedBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsKeyboardFocusWithin" Value="True">
                            <Setter TargetName="focusedBorder" Property="Visibility" Value="Visible" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- DataGridRow -->
    <Style x:Key="{x:Static datagridThemes:DataGridCommonDictionary.DataGridRowStyleKey}"
            TargetType="{x:Type DataGridRow}">

        <Setter Property="OverridesDefaultStyle" Value="True" />

        <!-- Removed setter because it will prevent the colors defined on the DataGrid style from being applied
        <Setter Property="Background" Value="{StaticResource {x:Static SystemColors.WindowBrushKey}}" />
        -->
        <Setter Property="SnapsToDevicePixels" Value="true" />
        <Setter Property="Validation.ErrorTemplate" Value="{x:Null}" />
        <Setter Property="ValidationErrorTemplate">
            <Setter.Value>
                <ControlTemplate>
                    <TextBlock Margin="2,0,0,0" VerticalAlignment="Center" Foreground="Red" Text="!" />
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGridRow}">
                    <Border x:Name="DGR_Border" Background="{TemplateBinding Background}"
                            BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}"
                            SnapsToDevicePixels="True">
                        <SelectiveScrollingGrid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                            </Grid.ColumnDefinitions>

                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>

                            <DataGridCellsPresenter Grid.Column="1" ItemsPanel="{TemplateBinding ItemsPanel}"
                                    SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />

                            <DataGridDetailsPresenter
                                    SelectiveScrollingGrid.SelectiveScrollingOrientation="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=AreRowDetailsFrozen, Converter={x:Static DataGrid.RowDetailsScrollingConverter}, ConverterParameter={x:Static SelectiveScrollingOrientation.Vertical}}"
                                    Grid.Column="1" Grid.Row="1" Visibility="{TemplateBinding DetailsVisibility}" />

                            <DataGridRowHeader SelectiveScrollingGrid.SelectiveScrollingOrientation="Vertical"
                                    Grid.RowSpan="2"
                                    Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Row}}" />
                        </SelectiveScrollingGrid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- datagrid:ThemedDataGrid -->
    <Style x:Key="{x:Static datagridThemes:DataGridCommonDictionary.DataGridStyleKey}"
            TargetType="{x:Type DataGrid}">
        <Setter Property="Background"
                Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.BackgroundBrushKey}}" />

        <Setter Property="RowBackground"
                Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.RowBackgroundBrushKey}}" />
        <Setter Property="AlternatingRowBackground"
                Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.AlternatingRowBackgroundBrushKey}}" />

        <Setter Property="HorizontalGridLinesBrush"
                Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.CellGridLineBrushKey}}" />
        <Setter Property="VerticalGridLinesBrush"
                Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.CellGridLineBrushKey}}" />

        <!--<Setter Property="FocusBehavior.TrackingModes" Value="Headers" />-->

        <Setter Property="Foreground" Value="{StaticResource {x:Static SystemColors.ControlTextBrushKey}}" />
        <Setter Property="BorderBrush" Value="#FF688CAF" />
        <Setter Property="BorderThickness" Value="1" />

        <Setter Property="RowHeaderWidth" Value="14" />

        <!-- This is needed to force DG to have a non-default value.  Otherwise the DGR.DetailsVisibility cannot have a value of VisibleWhenSelected by default. -->
        <Setter Property="RowDetailsVisibilityMode" Value="VisibleWhenSelected" />
        <Setter Property="ScrollViewer.CanContentScroll" Value="true" />

        <Setter Property="CellStyle"
                Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.DataGridCellStyleKey}}" />
        <Setter Property="ColumnHeaderStyle"
                Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.DataGridColumnHeaderStyleKey}}" />
        <Setter Property="RowHeaderStyle"
                Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.DataGridRowHeaderStyleKey}}" />
        <Setter Property="RowStyle"
                Value="{DynamicResource {x:Static datagridThemes:DataGridCommonDictionary.DataGridRowStyleKey}}" />

        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type DataGrid}">
                    <Border Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}"
                            BorderThickness="{TemplateBinding BorderThickness}" SnapsToDevicePixels="True"
                            Padding="{TemplateBinding Padding}">
                        <ScrollViewer Focusable="false" Name="DG_ScrollViewer">
                            <ScrollViewer.Template>
                                <ControlTemplate TargetType="{x:Type ScrollViewer}">
                                    <Grid>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="Auto" />
                                            <RowDefinition Height="*" />
                                            <RowDefinition Height="Auto" />
                                        </Grid.RowDefinitions>

                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>

                                        <!--Left Column Header Corner -->
                                        <Button Style="{StaticResource DataGridSelectAllStyle}"
                                                Width="{Binding Path=CellsPanelHorizontalOffset, RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}}"
                                                Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.All}}" />
                                        
                                        <!--Column Headers-->
                                        <DataGridColumnHeadersPresenter Grid.Column="1" Name="PART_ColumnHeadersPresenter"
                                                Visibility="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=HeadersVisibility, Converter={x:Static DataGrid.HeadersVisibilityConverter}, ConverterParameter={x:Static DataGridHeadersVisibility.Column}}" />

                                        <!--DataGrid content-->
                                        <ScrollContentPresenter x:Name="PART_ScrollContentPresenter" Grid.Row="1"
                                                Grid.ColumnSpan="2" CanContentScroll="{TemplateBinding CanContentScroll}" />

                                        <ScrollBar Grid.Row="1" Grid.Column="2" Name="PART_VerticalScrollBar"
                                                Orientation="Vertical" Maximum="{TemplateBinding ScrollableHeight}"
                                                ViewportSize="{TemplateBinding ViewportHeight}"
                                                Value="{Binding Path=VerticalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                                Visibility="{TemplateBinding ComputedVerticalScrollBarVisibility}" />

                                        <Grid Grid.Row="2" Grid.Column="1">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition
                                                        Width="{Binding RelativeSource={RelativeSource AncestorType={x:Type DataGrid}}, Path=NonFrozenColumnsViewportHorizontalOffset}" />
                                                <ColumnDefinition Width="*" />
                                            </Grid.ColumnDefinitions>
                                            <ScrollBar Grid.Column="1" Name="PART_HorizontalScrollBar" Orientation="Horizontal"
                                                    Maximum="{TemplateBinding ScrollableWidth}"
                                                    ViewportSize="{TemplateBinding ViewportWidth}"
                                                    Value="{Binding Path=HorizontalOffset, RelativeSource={RelativeSource TemplatedParent}, Mode=OneWay}"
                                                    Visibility="{TemplateBinding ComputedHorizontalScrollBarVisibility}" />
                                        </Grid>
                                    </Grid>
                                </ControlTemplate>
                            </ScrollViewer.Template>
                            <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" />
                        </ScrollViewer>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="{x:Type DataGrid}" TargetType="{x:Type DataGrid}"
            BasedOn="{StaticResource {x:Static datagridThemes:DataGridCommonDictionary.DataGridStyleKey}}" />

    <Style x:Key="amountCell" TargetType="{x:Type DataGridCell}" BasedOn="{StaticResource {x:Static datagridThemes:DataGridCommonDictionary.DataGridCellStyleKey}}">
        <Style.Triggers>
            <DataTrigger Binding="{Binding Profit.Value,Converter={StaticResource triggerConverter}}" Value="-1">
                <Setter Property="Background" Value="Coral" />
            </DataTrigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>